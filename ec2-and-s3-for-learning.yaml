AWSTemplateFormatVersion: "2010-09-09"
Description: Setup an EC2 instance for deep racer

Parameters:
  AMIId:
    Type: String
    Default: ami-02fe94dee086c0c37
  InstanceType:
    Type: String
    Default: g4dn.4xlarge
  SpotPrice:
    Type: String
    Default: '0.45'
  MyIPAddress:
    Type: String
  RuleNumber:
    Type: String
  NetworkAclId:
    Type: String
  DisableInstance:
    Type: String
    Description: DisableInstance, when 'Yes' results in no ec2 instance create, or when updating the stack, termination of possibly provisioned instance
    AllowedValues:
      - Yes
      - No
    Default: No

Conditions:
  UseOnDemandInstance: !Equals
    - !Ref SpotPrice
    - ''

  KeepInstance: !Equals
    - !Ref DisableInstance
    - No

Resources:
  Bucket:
    Type: 'AWS::S3::Bucket'

  BucketAccessPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS:
                - !GetAtt InstanceRole.Arn
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref Bucket
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref Bucket
                  - '/*'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from My IP Address

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupName: !Ref SecurityGroup
      IpProtocol: -1
      CidrIp: !Sub '${MyIPAddress}/32'


  NACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclId
      CidrBlock: !Sub '${MyIPAddress}/32'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: !Ref RuleNumber

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-inline-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
              - Effect: Allow
                Action:
                  - kms:*
                  - s3:*
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: !Ref AMIId
        InstanceType: !Ref InstanceType
        InstanceMarketOptions: !If [ UseOnDemandInstance, !Ref 'AWS::NoValue', { MarketType: spot, SpotOptions: { MaxPrice: !Ref SpotPrice }} ]
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeType: gp3
              VolumeSize: 40
              DeleteOnTermination: 'true'

  Instance:
    Condition: KeepInstance
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/profile.d/my_bucket.sh:
              content: !Sub |
                export MY_BUCKET=${Bucket}
              mode : "000664"
              owner: root
              group: root
    Properties:
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          snap install amazon-ssm-agent --classic
          apt-get update
          apt-get -y install python3-pip
          curl -o awscfnboot.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          tar -zxf awscfnboot.tar.gz
          python3 -m pip install /aws-cfn-bootstrap-2.0 > /tmp/pip.log
          /usr/local/bin/cfn-init --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
          su - ubuntu -c "git clone https://github.com/aws-deepracer-community/deepracer-for-cloud.git && cd deepracer-for-cloud && ./bin/prepare.sh > /tmp/deepracer.log"

Outputs:
  DNS:
    Condition: KeepInstance
    Value: !GetAtt Instance.PublicDnsName
  Instance:
    Condition: KeepInstance
    Value: !Ref Instance
